{"ast":null,"code":"const validationIngreso = userData => {\n  const errors = {};\n\n  // Verificar si userData está definido y es un objeto\n  if (!userData || typeof userData !== 'object') {\n    return errors; // Retorna un objeto de errores vacío si userData no está definido o no es un objeto\n  } else\n    // Verificar si el nombre está vacío\n    if (userData.name && userData.name.trim().length === 0) {\n      errors.name = 'El nombre no debe estar vacío';\n    }\n    // Verificar la longitud del nombre\n    else if (userData.name && (userData.name.trim().length < 4 || userData.name.trim().length > 40)) {\n      errors.name = 'Usuario no valido';\n    } else if (userData.name) {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const phonePattern = /^\\d{10}$/; // Asumiendo que el número de celular es un número de 10 dígitos\n\n      if (!emailPattern.test(userData.name) && !phonePattern.test(userData.name)) {\n        errors.name = 'Usuario no valido';\n      }\n    }\n\n  // Verificar si la contraseña está vacía\n  if (userData.pass && userData.pass.trim().length === 0) {\n    errors.pass = 'La contraseña no debe estar vacía';\n  }\n  // Verificar si la contraseña contiene letras, números y caracteres especiales\n  else if (userData.pass) {\n    const minLength = 6;\n    const hasUpperCase = /[A-Z]/.test(userData.pass);\n    const hasLowerCase = /[a-z]/.test(userData.pass);\n    const hasNumber = /\\d/.test(userData.pass);\n    const hasSpecialChar = /[@$!%*?&]/.test(userData.pass);\n    if (userData.pass.length < minLength) {\n      errors.pass = 'Contraseña no valida'; //`La contraseña debe tener al menos ${minLength} caracteres`;\n    } else if (!hasUpperCase) {\n      errors.pass = 'Contraseña no valida';\n    } else if (!hasLowerCase) {\n      errors.pass = 'Contraseña no valida';\n    } else if (!hasNumber) {\n      errors.pass = 'Contraseña no valida';\n    } else if (!hasSpecialChar) {\n      errors.pass = 'Contraseña no valida';\n    }\n  }\n  return errors;\n};\nexport default validationIngreso;","map":{"version":3,"names":["validationIngreso","userData","errors","name","trim","length","emailPattern","phonePattern","test","pass","minLength","hasUpperCase","hasLowerCase","hasNumber","hasSpecialChar"],"sources":["C:/Users/Luis Buelvas/Desktop/Carpeta_PI/ProyectoFinal/FastFoodFront/src/Components/Login/Login_Ingreso/Validar_Login_ingreso.js"],"sourcesContent":["const validationIngreso = (userData) => {\r\n    const errors = {};\r\n\r\n    // Verificar si userData está definido y es un objeto\r\n    if (!userData || typeof userData !== 'object') {\r\n        return errors; // Retorna un objeto de errores vacío si userData no está definido o no es un objeto\r\n    }\r\n    else\r\n    // Verificar si el nombre está vacío\r\n    if (userData.name && userData.name.trim().length === 0) {\r\n        errors.name = 'El nombre no debe estar vacío';\r\n    } \r\n    // Verificar la longitud del nombre\r\n    else if (userData.name && (userData.name.trim().length < 4 || userData.name.trim().length > 40)) {\r\n        errors.name = 'Usuario no valido';\r\n    } else\r\n    if (userData.name) {\r\n        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        const phonePattern = /^\\d{10}$/; // Asumiendo que el número de celular es un número de 10 dígitos\r\n\r\n        if (!emailPattern.test(userData.name) && !phonePattern.test(userData.name)) {\r\n            errors.name = 'Usuario no valido';\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Verificar si la contraseña está vacía\r\n    if (userData.pass && userData.pass.trim().length === 0) {\r\n        errors.pass = 'La contraseña no debe estar vacía';\r\n    } \r\n    // Verificar si la contraseña contiene letras, números y caracteres especiales\r\n    else \r\n    if (userData.pass) {\r\n        const minLength = 6;\r\n        const hasUpperCase = /[A-Z]/.test(userData.pass);\r\n        const hasLowerCase = /[a-z]/.test(userData.pass);\r\n        const hasNumber = /\\d/.test(userData.pass);\r\n        const hasSpecialChar = /[@$!%*?&]/.test(userData.pass);\r\n\r\n        if (userData.pass.length < minLength) {\r\n            errors.pass = 'Contraseña no valida'; //`La contraseña debe tener al menos ${minLength} caracteres`;\r\n        } else if (!hasUpperCase) {\r\n            errors.pass = 'Contraseña no valida';\r\n        } else if (!hasLowerCase) {\r\n            errors.pass = 'Contraseña no valida';\r\n        } else if (!hasNumber) {\r\n            errors.pass = 'Contraseña no valida';\r\n        } else if (!hasSpecialChar) {\r\n            errors.pass = 'Contraseña no valida';\r\n        }\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport default validationIngreso;\r\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAIC,QAAQ,IAAK;EACpC,MAAMC,MAAM,GAAG,CAAC,CAAC;;EAEjB;EACA,IAAI,CAACD,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAC3C,OAAOC,MAAM,CAAC,CAAC;EACnB,CAAC;IAED;IACA,IAAID,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MACpDH,MAAM,CAACC,IAAI,GAAG,+BAA+B;IACjD;IACA;IAAA,KACK,IAAIF,QAAQ,CAACE,IAAI,KAAKF,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,EAAE,CAAC,EAAE;MAC7FH,MAAM,CAACC,IAAI,GAAG,mBAAmB;IACrC,CAAC,MACD,IAAIF,QAAQ,CAACE,IAAI,EAAE;MACf,MAAMG,YAAY,GAAG,4BAA4B;MACjD,MAAMC,YAAY,GAAG,UAAU,CAAC,CAAC;;MAEjC,IAAI,CAACD,YAAY,CAACE,IAAI,CAACP,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACI,YAAY,CAACC,IAAI,CAACP,QAAQ,CAACE,IAAI,CAAC,EAAE;QACxED,MAAM,CAACC,IAAI,GAAG,mBAAmB;MACrC;IACJ;;EAYA;EACA,IAAIF,QAAQ,CAACQ,IAAI,IAAIR,QAAQ,CAACQ,IAAI,CAACL,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IACpDH,MAAM,CAACO,IAAI,GAAG,mCAAmC;EACrD;EACA;EAAA,KAEA,IAAIR,QAAQ,CAACQ,IAAI,EAAE;IACf,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,YAAY,GAAG,OAAO,CAACH,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC;IAChD,MAAMG,YAAY,GAAG,OAAO,CAACJ,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC;IAChD,MAAMI,SAAS,GAAG,IAAI,CAACL,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC;IAC1C,MAAMK,cAAc,GAAG,WAAW,CAACN,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC;IAEtD,IAAIR,QAAQ,CAACQ,IAAI,CAACJ,MAAM,GAAGK,SAAS,EAAE;MAClCR,MAAM,CAACO,IAAI,GAAG,sBAAsB,CAAC,CAAC;IAC1C,CAAC,MAAM,IAAI,CAACE,YAAY,EAAE;MACtBT,MAAM,CAACO,IAAI,GAAG,sBAAsB;IACxC,CAAC,MAAM,IAAI,CAACG,YAAY,EAAE;MACtBV,MAAM,CAACO,IAAI,GAAG,sBAAsB;IACxC,CAAC,MAAM,IAAI,CAACI,SAAS,EAAE;MACnBX,MAAM,CAACO,IAAI,GAAG,sBAAsB;IACxC,CAAC,MAAM,IAAI,CAACK,cAAc,EAAE;MACxBZ,MAAM,CAACO,IAAI,GAAG,sBAAsB;IACxC;EACJ;EACA,OAAOP,MAAM;AACjB,CAAC;AAED,eAAeF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module"}